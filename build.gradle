import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.19'
        classpath group: 'postgresql', name: 'postgresql', version: '9.1-901-1.jdbc4'
    }
}

plugins {
    id 'java'
    id "org.flywaydb.flyway" version "6.3.3"
    id 'nu.studer.jooq' version '4.1'
}


group 'jLOB'
version '1.0-SNAPSHOT'


repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.2'
    testCompile group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.21'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.3.3'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    compile group: 'it.unimi.dsi', name: 'fastutil', version: '8.3.0'
    compile group: 'com.google.guava', name: 'guava', version: '28.1-jre'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile group: 'com.sparkjava', name: 'spark-core', version: '2.8.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.3'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.10.3'
    compile group: 'org.quickfixj', name: 'quickfixj-core', version: '2.1.1'
    compile group: 'org.quickfixj', name: 'quickfixj-messages-fix42', version: '2.1.1'
    compile group: 'org.jooq', name: 'jooq', version: '3.13.1'
    compile group: 'org.jooq', name: 'jooq-codegen', version: '3.13.1'
    compile group: 'org.jooq', name: 'jooq-meta', version: '3.13.1'
    compile group: 'org.flywaydb', name: 'flyway-core', version: '6.3.3'
    compile group: 'com.google.inject', name: 'guice', version: '4.0'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.12'
    jooqRuntime group: 'org.postgresql', name: 'postgresql', version: '42.2.12'
}

task bookHttpApp(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "LimitOrderBookHttpApplication"
}

task bookFixApp(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "LimitOrderBookFixApplication"
    workingDir(new File("$projectDir/src/main").toString())
}

Map<String, String> loadYaml() {
    def configFile = new File("$projectDir/src/main/resources/config.local.yaml").newInputStream()
    return new Yaml().load(configFile)
}

def config = loadYaml()

flyway {
    url = "jdbc:postgresql://${config.database.host}:${config.database.port}/${config.database.name}"
    user = "${config.database.username}"
    password = "${config.database.password}"
    driver = "org.postgresql.Driver"
}

jooq {
    generateSchemaSourceOnCompilation = true
    jLob(sourceSets.main) {
        logging = "INFO"
        jdbc {
            driver = "org.postgresql.Driver"
            url = "jdbc:postgresql://${config.database.host}:${config.database.port}/${config.database.name}"
            user = "${config.database.username}"
            password = "${config.database.password}"
        }
        generator {
            name = "org.jooq.codegen.DefaultGenerator"
            strategy {
                name = "org.jooq.codegen.DefaultGeneratorStrategy"
            }
            database {
                name = "org.jooq.meta.postgres.PostgresDatabase"
                inputSchema = "public"
                forcedTypes {
                    forcedType {
                        userType = "java.time.Instant"
                        types = "timestamp"
                        converter = "db.converters.TimestampToInstantConverter"
                    }
                    forcedType {
                        userType = "dto.Side"
                        converter = "db.converters.SideConverter"
                        includeExpression = "side"
                    }
                }
            }
            generate {
                daos = false
                relations = true
                deprecated = false
                records = true
                immutablePojos = false
                fluentSetters = true
            }
            target {
                packageName = "db.jooq"
                directory = "src/main/java"
            }
        }
    }
}

task cleanGeneratedJooqFiles(type: Delete) {
    delete 'src/main/java/db/jooq'
}

tasks.clean.dependsOn(tasks.cleanGeneratedJooqFiles)